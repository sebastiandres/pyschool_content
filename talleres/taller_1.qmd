### Introducci√≥n a Python

En este taller, nos enfocaremos en ilustrar algunos conceptos b√°sicos de Python mediante distintos ejemplos. 

## Programaci√≥n

Si tuvi√©ramos que resumir el prop√≥sito de la programaci√≥n en una frase, ser√≠a:

> ‚ÄúAutomatizar tareas para que la computadora las realice por nosotros.

Cualquier labor tediosa y repetitiva deber√≠a ser delegada a una computadora, permitiendo as√≠ que los humanos se enfoquen en los problemas verdaderamente interesantes: aquellos que demandan creatividad, pensamiento cr√≠tico y subjetividad.

> ‚ÄúSe dice que uno no comprende verdaderamente algo hasta que puede explic√°rselo a otro. En realidad, uno no lo entiende completamente hasta que puede explic√°rselo a una computadora.‚Äù -- Donald Knuth

La programaci√≥n es la forma en la cual podemos detallarle a una computadora el paso a paso que queremos que realice. ¬°Cuando una computadora no hace lo que quer√≠amos, es porque no logramos explicitarlo de manera adecuada!

## Python

Python es un lenguaje de programaci√≥n que ha crecido en popularidad debido a 3 razones principales:

1. Es f√°cil de entender: un programa bien escrito se parece mucho al ingl√©s.
2. Posee muchas librer√≠as por defecto: toda instalaci√≥n de python viene con librer√≠as para un amplio tipo de aplicaciones (math, random, os, sys, time, datetime, etc.)
3. Es extensible: 

## Ejecutando c√≥digo Python

Para utilizar Python en una computadora, es necesario:
1. Tener instalada alguna versi√≥n de Python
2. Escribir tu programa en un archivo (por ejemplo "mi_programa.py")
3. Ejecutar el programa con Python ("python mi_programa.py")

A medida que Python se fue haciendo m√°s popular, aparecieron otras alternativas de uso como los notebooks (Jupyter Notebooks, Google Colab y otros).

Por simplicidad, en la PySchool utilizaremos una tecnolog√≠a reciente que permite *emular* la ejecuci√≥n de Python en una p√°gina web. Esto es pr√°ctico pues esta p√°gina puede ser utilizada en cualquier dispositivo conectado a internet y no requiere instalaciones adicionales por parte del usuario, pero debe considerarse que es un ambiente de trabajo.

Existen 3 botones en la parte superior del contenedor de c√≥digo, para ejecutar el c√≥digo, reiniciar el c√≥digo inicial y copiar el c√≥digo.

<center>
<img src="../images/botones.png">
</center>


## 1. üëã Hola Mundo
Es tradici√≥n en cualquier lenguaje de programaci√≥n comenzar haciendo que el computador imprima la frase "Hola, Mundo" (o "Hello World") en la pantalla.

```{pyodide-python}
print("Hola, Mundo")
```

::: {.callout-tip collapse="false" title="Desaf√≠o:"}
¬øC√≥mo podr√≠as hacer que en el c√≥digo anterior te saludara con tu nombre? ¬øPodr√≠as cambiar el saludo?
:::

Podemos mejorar el c√≥digo anterior utilizando **variables** que pueden entenderse como una caja con nombre donde puedes guardar algo, como un n√∫mero, texto, o cualquier otro tipo de informaci√≥n. Usas un nombre para referirte a esta caja (la variable), lo que te permite acceder a lo que has guardado dentro de ella m√°s adelante en tu programa. Puedes cambiar lo que est√° dentro de la caja en cualquier momento, simplemente guardando algo nuevo en ella.
```{pyodide-python}
saludo = "Hola "
nombre = "Chile"
print(saludo + nombre)
```

::: {.callout-tip collapse="false" title="Desaf√≠o:"}
¬øQu√© significa el signo `+` en el ejemplo anterior? ¬øQu√© significan los s√≠mbolos `"`?
:::

Un principio fundamental de la programaci√≥n es el deseo del programador de minimizar la cantidad de trabajo. 
Si hay l√≠neas de Python que se repite muchas veces en el programa, resulta conveniente "empaquetarlas" en una funci√≥n de manera que el c√≥digo sea m√°s compacto y no tengamos que realizar cambios en varios lugares distintos.

As√≠ por ejemplo podemos reducir el c√≥digo desde
```{pyodide-python}
saludo = "Hola "
nombre = "DUOC"
print(saludo + nombre)
saludo = "Que tal "
nombre = "Valpara√≠so"
print(saludo + nombre)
saludo = "Saludos "
nombre = "Chile"
print(saludo + nombre)
```

al siguiente c√≥digo
```{pyodide-python}
# Comentario: esta es la funci√≥n imprimir_saludo
def imprimir_saludo(saludo, nombre):
    print(saludo + " " + nombre)

imprimir_saludo("Hola", "DUOC")
imprimir_saludo("Que tal", "Valpara√≠so")
imprimir_saludo("Saludos", "Chile")
```

En este ejemplo hemos revisado la funci√≥n `print`, strings (cadenas de caracteres), variables y funciones.
Python proporciona muchas [funciones adicionales para manipular strings](https://python-docs-es.readthedocs.io/es/3.12/library/stdtypes.html#str). ¬øQue hacen las siguientes funciones?

```{pyodide-python}
mi_string = "¬øHoLa Ke HaCe?"
#print(mi_string)
#print(mi_string.upper())
#print(mi_string.lower())
#print(mi_string.title())
#print(mi_string.capitalize())
#print(mi_string.swapcase())
#print(mi_string.split())
```

Debes borrar el car√°cter `#` para que la l√≠nea deje de ser un comentario y se ejecute.

## 2. üßÆ Calculadora B√°sica
Una simple calculadora que realiza operaciones b√°sicas como suma, resta, multiplicaci√≥n y divisi√≥n.

```{pyodide-python}
def calculadora(operacion, num1, num2):
    if operacion == '+':
        return f"Resultado: {num1 + num2}"
    elif operacion == '-':
        return f"Resultado: {num1 - num2}"
    elif operacion == '*':
        return f"Resultado: {num1 * num2}"
    elif operacion == '/':
        if num2 != 0:
            return f"Resultado: {num1 / num2}"
        else:
            return "Error: Divisi√≥n por cero"
    else:
        return "Operaci√≥n no v√°lida"

# Ejemplo de uso
operacion = '+'
num1 = 10
num2 = 5
resultado = calculadora(operacion, num1, num2)
print(resultado)
```

## 3. üìÖ Verificaci√≥n de A√±o Bisiesto
Un programa para determinar si un a√±o es bisiesto.

```{pyodide-python}
def es_bisiesto(anio):
    if (anio % 4 == 0 and anio % 100 != 0) or (anio % 400 == 0):
        return True
    else:
        return False

# Ejemplo de uso
anio = 2024
if es_bisiesto(anio):
    print(f"{anio} es un a√±o bisiesto")
else:
    print(f"{anio} no es un a√±o bisiesto")
```

## 4. üî¢ Adivina el N√∫mero
Un juego donde la computadora elige un n√∫mero al azar y el usuario intenta adivinarlo.

```{pyodide-python}
import random

def adivina_el_numero(numero_secreto, intentos_usuario):
    intentos = 0
    adivinado = False

    for intento in intentos_usuario:
        intentos += 1
        if intento < numero_secreto:
            print("Muy bajo")
        elif intento > numero_secreto:
            print("Muy alto")
        else:
            print(f"¬°Correcto! Adivinaste el n√∫mero en {intentos} intentos.")
            adivinado = True
            break

    if not adivinado:
        print(f"No adivinaste el n√∫mero en {len(intentos_usuario)} intentos. El n√∫mero era {numero_secreto}.")

# Ejemplo de uso
numero_secreto = random.randint(1, 100)
intentos_usuario = [50, 25, 75, 60, 90]
adivina_el_numero(numero_secreto, intentos_usuario)
```

## 5. üìú Conjetura de Collatz
Un programa que implementa la Conjetura de Collatz, tambi√©n conocida como la conjetura 3n + 1.

```{pyodide-python}
def conjetura_de_collatz(n):
    resultado = []
    while n != 1:
        resultado.append(n)
        if n % 2 == 0:
            n = n // 2
        else:
            n = 3 * n + 1
    resultado.append(n)
    return resultado

# Ejemplo de uso
numero = 6
print(" -> ".join(map(str, conjetura_de_collatz(numero))))
```

## 6. ‚ûï Ejercicios de Aritm√©tica

### Suma de N√∫meros
```{pyodide-python}
def suma_numeros(n):
    suma = 0
    for i in range(1, n+1):
        suma += i
    return suma

# Ejemplo de uso
n = 10
print(f"La suma de los n√∫meros de 1 a {n} es: {suma_numeros(n)}")
```

### Factorial de un N√∫mero
```{pyodide-python}
def factorial(n):
    if n == 0:
        return 1
    else:
        return n * factorial(n-1)

# Ejemplo de uso
n = 5
print(f"El factorial de {n} es: {factorial(n)}")
```

## 7. üìö Ejemplos Adicionales

### Conversi√≥n de Temperatura
Un programa para convertir grados Celsius a Fahrenheit.

```{pyodide-python}
def celsius_a_fahrenheit(celsius):
    return (celsius * 9/5) + 32

# Ejemplo de uso
celsius = 25
print(f"{celsius} grados Celsius son {celsius_a_fahrenheit(celsius)} grados Fahrenheit")
```

### C√°lculo del √çndice de Masa Corporal (IMC)
Un programa para calcular el IMC de una persona.

```{pyodide-python}
def calcular_imc(peso, altura):
    return peso / (altura ** 2)

# Ejemplo de uso
peso = 70  # kg
altura = 1.75  # m
print(f"El IMC es: {calcular_imc(peso, altura):.2f}")
```

### N√∫mero Primo
Un programa para verificar si un n√∫mero es primo.

```{pyodide-python}
def es_primo(n):
    if n <= 1:
        return False
    for i in range(2, int(n ** 0.5) + 1):
        if n % i == 0:
            return False
    return True

# Ejemplo de uso
numero = 29
if es_primo(numero):
    print(f"{numero} es un n√∫mero primo")
else:
    print(f"{numero} no es un n√∫mero primo")
```

