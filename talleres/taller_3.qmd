# Python en Ciencia de Datos

En este taller, utilizaremos Python para explorar y analizar un conjunto de datos de Pok√©mon. Los estudiantes de secundaria podr√°n ver c√≥mo se utiliza la ciencia de datos para obtener informaci√≥n interesante y aprender a visualizar datos de manera efectiva.

## üìä Exploraci√≥n y Visualizaci√≥n de Datos

Primero, importemos las bibliotecas necesarias y carguemos el conjunto de datos de Pok√©mon.

### Cargar el Conjunto de Datos

```{pyodide-python}
import pandas as pd

# Cargar el conjunto de datos de Pok√©mon
url = 'https://gist.githubusercontent.com/armgilles/194bcff35001e7eb53a2a8b441e8b2c6/raw/92200bc0a673d5ce2110aaad4544ed6c4010f687/pokemon.csv'
pokemon_data = pd.read_csv(url)

# Mostrar las primeras filas del conjunto de datos
pokemon_data.head()
```

### Descripci√≥n del Conjunto de Datos

Obtener una visi√≥n general de las estad√≠sticas del conjunto de datos.

```{pyodide-python}
# Mostrar la descripci√≥n estad√≠stica del conjunto de datos
pokemon_data.describe()
```

## üìà An√°lisis y Visualizaci√≥n de Datos

### Tipos de Pok√©mon

Veamos cu√°ntos Pok√©mon de cada tipo hay en el conjunto de datos.

```{pyodide-python}
import matplotlib.pyplot as plt

# Contar la cantidad de Pok√©mon por tipo
pokemon_por_tipo = pokemon_data['Type 1'].value_counts()

# Crear un gr√°fico de barras
plt.figure(figsize=(12, 6))
pokemon_por_tipo.plot(kind='bar', color='skyblue')
plt.title('Cantidad de Pok√©mon por Tipo')
plt.xlabel('Tipo')
plt.ylabel('Cantidad')
plt.show()
```

### Estad√≠sticas de Ataque y Defensa

Comparar las estad√≠sticas de ataque y defensa de los Pok√©mon.

```{pyodide-python}
# Crear un gr√°fico de dispersi√≥n de ataque vs defensa
plt.figure(figsize=(12, 6))
plt.scatter(pokemon_data['Attack'], pokemon_data['Defense'], color='purple', alpha=0.5)
plt.title('Ataque vs Defensa de Pok√©mon')
plt.xlabel('Ataque')
plt.ylabel('Defensa')
plt.show()
```

### Promedio de Estad√≠sticas por Tipo

Calcular y visualizar el promedio de las estad√≠sticas principales de los Pok√©mon agrupados por tipo.

```{pyodide-python}
# Calcular el promedio de estad√≠sticas por tipo
promedio_estadisticas = pokemon_data.groupby('Type 1')[['HP', 'Attack', 'Defense', 'Speed']].mean()

# Crear un gr√°fico de barras apiladas
promedio_estadisticas.plot(kind='bar', stacked=True, figsize=(12, 8), color=['red', 'blue', 'green', 'orange'])
plt.title('Promedio de Estad√≠sticas por Tipo de Pok√©mon')
plt.xlabel('Tipo')
plt.ylabel('Promedio de Estad√≠sticas')
plt.legend(title='Estad√≠sticas')
plt.show()
```

### Peso y Altura de los Pok√©mon

Explorar la relaci√≥n entre el peso y la altura de los Pok√©mon (utilizando las estad√≠sticas de `Weight` y `Height` si estuvieran disponibles).

```{pyodide-python}
# Nota: Este conjunto de datos no tiene 'Weight' y 'Height', as√≠ que simularemos datos
import numpy as np

# Agregar columnas de peso y altura simuladas
pokemon_data['Weight'] = np.random.uniform(5, 150, len(pokemon_data))  # Peso en kg
pokemon_data['Height'] = np.random.uniform(0.3, 2.5, len(pokemon_data))  # Altura en m

# Crear un gr√°fico de dispersi√≥n de peso vs altura
plt.figure(figsize=(12, 6))
plt.scatter(pokemon_data['Weight'], pokemon_data['Height'], color='green', alpha=0.5)
plt.title('Peso vs Altura de Pok√©mon')
plt.xlabel('Peso (kg)')
plt.ylabel('Altura (m)')
plt.show()
```

## üìä Tablas y Gr√°ficos Interactivos

### Tabla de Pok√©mon con Mayor Ataque

Mostrar los 10 Pok√©mon con la mayor estad√≠stica de ataque.

```{pyodide-python}
# Obtener los 10 Pok√©mon con mayor ataque
top_ataque = pokemon_data.nlargest(10, 'Attack')[['Name', 'Type 1', 'Attack', 'Defense', 'HP']]

# Mostrar la tabla
top_ataque
```

### Tabla de Pok√©mon con Mayor Defensa

Mostrar los 10 Pok√©mon con la mayor estad√≠stica de defensa.

```{pyodide-python}
# Obtener los 10 Pok√©mon con mayor defensa
top_defensa = pokemon_data.nlargest(10, 'Defense')[['Name', 'Type 1', 'Defense', 'Attack', 'HP']]

# Mostrar la tabla
top_defensa
```

